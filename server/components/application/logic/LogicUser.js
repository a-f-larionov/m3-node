/**
 * @type {LogicUser}
 * @constructor
 */
LogicUser = function () {
    let self = this;
    let userToCntx = {};
    let userToCntxCount = 0;

    this.init = function (afterInitCallback) {
        ApiRouter.addOnDisconnectCallback(onDisconnectOrFailedSend);
        ApiRouter.addOnFailedSendCallback(onDisconnectOrFailedSend);
        Logs.log("LogicUser inited.", Logs.LEVEL_NOTIFY);
        afterInitCallback();
    };

    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Ü —Å–µ—Ç–∏ –≤–ö–æ–Ω—Ç–∞–∫—Ç–µ.
     * @param socNetUserId
     * @param authParams
     * @param cntx
     */
    this.authorizeByVK = function (socNetUserId, authParams, cntx) {
        let socNetTypeId = SocNet.TYPE_VK;
        socNetUserId = parseInt(socNetUserId);
        if (isNaN(socNetUserId)) {
            Logs.log("LogicUser: cant auth, SocNet.checkAuth failed. (VK), socNetUserId is not a number", Logs.LEVEL_WARNING, {
                socNeUserId: socNetUserId,
                authParams: authParams
            });
            return;
        }
        let checkResult = SocNet(socNetTypeId).checkAuth(socNetUserId, authParams);
        if (!checkResult) {
            Logs.log("LogicUser: cant auth, SocNet.checkAuth failed. (VK)", Logs.LEVEL_WARNING, {
                socNetUserId: socNetUserId,
                authParams: authParams
            });
            return;
        }
        if (!checkResult) return;
        let prid = Profiler.start(Profiler.ID_AUTH_VK);
        /** Get from db */
        DataUser.getBySocNet(socNetTypeId, socNetUserId)
            .then(function (user) {

                authorizeOrCreate(user, socNetTypeId, socNetUserId, cntx, prid);
            });
    };

    /**
     * @todo authorization is equal authorizeByVK! is it reusable code
     * @param socNetUserId {int}
     * @param authParams {Object}
     * @param cntx {Object}
     */
    this.authorizeByStandalone = function (socNetUserId, authParams, cntx) {
        let socNetTypeId = SocNet.TYPE_STANDALONE;
        socNetUserId = parseInt(socNetUserId);
        if (isNaN(socNetUserId)) {
            Logs.log("LogicUser: cant auth, SocNet.checkAuth failed. (VK), socNetUserId is not a number", Logs.LEVEL_WARNING, {
                socNeUserId: socNetUserId,
                authParams: authParams
            });
            return;
        }
        let checkResult = SocNet(socNetTypeId).checkAuth(socNetUserId, authParams);
        if (!checkResult) {
            Logs.log("LogicUser: cant auth, SocNet.checkAuth failed.(Standalone)", Logs.LEVEL_WARNING, {
                socNetUserId: socNetUserId,
                authParams: authParams
            });
        }
        if (!checkResult) return;
        let prid = Profiler.start(Profiler.ID_AUTH_STANDALONE);
        /* get from db */
        DataUser.getBySocNet(socNetTypeId, socNetUserId)
            .then(function (user) {
                authorizeOrCreate(user, socNetTypeId, socNetUserId, cntx, prid);
            });
    };

    let authorizeOrCreate = function (user, socNetTypeId, socNetUserId, cntx, prid) {
        /** If not exists create user */
        if (!user) {
            createUser(socNetTypeId, socNetUserId, function (user) {
                authorizeSendSuccess(user, cntx, prid);
            })
        } else {
            authorizeSendSuccess(user, cntx, prid);
        }
    };

    /**
     * –°–æ–∑–¥–∞—ë—Ç —é–∑–µ—Ä–∞ –ø–æ –¥–∞–Ω–Ω—ã–º —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏.
     * @param socNetTypeId {Number} id —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏, LogicUser.SocNet.TYPE_*.
     * @param socNetUserId {Number} id —é–∑–µ—Ä–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏.
     * @param callback {Function} –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */
    let createUser = function (socNetTypeId, socNetUserId, callback) {
        DataUser.createFromSocNet(socNetTypeId, socNetUserId, function (user) {
            callback(user);
        });
    };

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É, —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.
     * @param user {Object} –∏–Ω—Ñ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * @param cntx {Object} –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
     * @param prid {int} id –ø—Ä–æ—Ñ–µ–ª–∏—Ä—É–π—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞
     */
    let authorizeSendSuccess = function (user, cntx, prid) {
        /** –¢—É—Ç –º—ã –∑–∞–ø–æ–º–Ω–∏–º –µ–≥–æ cid —Ä–∞–∑ –∏ –Ω–∞ –≤—Å–µ–≥–¥–∞ */

        var url = SocNet(user.socNetTypeId).getUserProfileUrl(user.socNetUserId);
        Logs.log("ü•∞ ", Logs.LEVEL_NOTIFY, url, Logs.CHANNEL_TELEGRAM );
        KafkaC.send("ü•∞" + url);

        if (user.socNetTypeId === SocNet.TYPE_VK) Statistic.write(user.id, Statistic.ID_AUTHORIZE_VK);
        if (user.socNetTypeId === SocNet.TYPE_STANDALONE) Statistic.write(user.id, Statistic.ID_AUTHORIZE_STANDALONE);

        userAddConn(user, cntx);
        DataUser.updateLastLogin(user.id, cntx);
        CAPIUser.authorizeSuccess(user.id, user);
        Profiler.finish(prid);
    };

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞–Ω–Ω—ã–µ
     * @param userId {int} id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * @param group {string} –≥—Ä—É–ø–ø—É –∞–ø–∏.
     * @param method {string} –º–µ—Ç–æ–¥ –∞–ø–∏.
     * @param arguments {Array} –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∞–ø–∏.
     */
    this.sendToUser = function (userId, group, method, arguments) {
        let cntxList = userGetConns(userId);
        ApiRouter.executeRequest(group, method, arguments, cntxList);
    };

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º.
     * @param capiFunction {Function} CAPI-—Ñ—É–Ω–∫—Ü–∏—è, CAPI{groupName}.{functionName}.
     * @param arg1 {*} –ª—é–±–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ CAPI-—Ñ—É–Ω–∫—Ü–∏—é 1-—ã–º.
     * @param arg2 {*} –ª—é–±–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ CAPI-—Ñ—É–Ω–∫—Ü–∏—é 2-—ã–º.
     * @param arg3 {*} –ª—é–±–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ CAPI-—Ñ—É–Ω–∫—Ü–∏—é 3-—ã–º.
     * @param arg4 {*} –ª—é–±–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ CAPI-—Ñ—É–Ω–∫—Ü–∏—é 4-—ã–º.
     * @param arg5 {*} –ª—é–±–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ CAPI-—Ñ—É–Ω–∫—Ü–∏—é 5-—ã–º.
     * @param arg6 {*} –ª—é–±–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ CAPI-—Ñ—É–Ω–∫—Ü–∏—é 6-—ã–º.
     * @param arg7 {*} –ª—é–±–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ CAPI-—Ñ—É–Ω–∫—Ü–∏—é 7-—ã–º
     * @param arg8 {*} –ª—é–±–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ CAPI-—Ñ—É–Ω–∫—Ü–∏—é 8-—ã–º.
     */
    this.sendToAll = function () {
        let args = [];
        args = Array.prototype.slice.call(arguments);
        capiFunction = args.shift();
        args.unshift(0);
        for (let userId in userToCntx) {
            args[0] = userId;
            capiFunction.apply(null, args);
        }
    };

    this.getOnlineUserIds = function () {
        let list;
        list = [];
        for (let userId in userToCntx) {
            list.push(userId);
        }
        return list;
    };

    /**
     * –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω.
     * @param userId {int} id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * @returns {boolean}
     */
    this.isUserOnline = function (userId) {
        return !!userGetConns(userId);
    };

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
     * –¢–∞–∫ –∂–µ —Å–æ–∑–¥–∞—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç.
     * @param user
     * @param cntx
     */
    let userAddConn = function (user, cntx) {
        if (!userToCntx[user.id]) {
            Logs.log("CREATE user context. uid:" + user.id + ", cid:" + cntx.cid, Logs.LEVEL_DETAIL);
            userToCntx[user.id] = {
                conns: {},
                user: {
                    id: user.id,
                    socNetUserId: user.socNetUserId
                },
                connsCount: 0
            };
            userToCntxCount++;
        }
        Logs.log("ADD user conn", Logs.LEVEL_DETAIL);
        cntx.userId = user.id;
        cntx.isAuthorized = true;
        cntx.user = userToCntx[user.id].user;
        userToCntx[user.id].conns[cntx.cid] = cntx;
        userToCntx[user.id].connsCount++;
    };

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * @param userId
     * @returns {*}
     */
    let userGetConns = function (userId) {
        return userToCntx[userId] ? userToCntx[userId].conns : null;
    };

    /**
     * –£–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * –¢–∞–∫ –∂–µ —É–¥–∞–ª–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
     * @param cntx
     */
    let userDeleteConn = function (cntx) {
        let userId = cntx.userId;
        Logs.log("DELETE user conn", Logs.LEVEL_DETAIL);
        delete userToCntx[userId].conns[cntx.cid];
        userToCntx[userId].connsCount--;
        if (userToCntx[userId].connsCount == 0) {
            Logs.log("DELETE user Context", Logs.LEVEL_DETAIL);
            delete userToCntx[userId];
            userToCntxCount--;
        }
    };

    /**
     * –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ –∏–≥—Ä—ã.
     * @param userId {Number} id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */
    let onLogout = function (userId) {
        Logs.log("User logout. user.id=" + userId, Logs.LEVEL_DETAIL);
        Statistic.write(userId, Statistic.ID_LOGOUT);
        DataUser.updateLastLogout(userId);
    };

    /**
     * —ç—Ç–æ –∫–∞–ª–ª–±–µ–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á—Ç–æ —Å–æ–µ–¥–∏–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ.
     * –∏ –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –º—ã –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç–∫–æ–Ω–µ–∫—Ç–∏–≤—à–µ–º—É—Å—è –∫–ª–∏–µ–Ω—Ç—É,
     * –º—ã –ø–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * @param cntx
     */
    let onDisconnectOrFailedSend = function (cntx) {
        if (cntx && cntx.userId) {
            onLogout(cntx.userId);
            userDeleteConn(cntx);
        }
    };

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
     * @param toUserId {Number} –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
     * @param userId {Number} –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
     * @param prid
     */
    this.sendUserInfo = function (userId, toUserId, prid) {
        DataUser.getById(userId, function (user) {
            if (user) {
                user.online = self.isUserOnline(user.id);
                CAPIUser.updateUserInfo(toUserId, prepareUserToClient(user));
                pFinish(prid);
            } else {
                pClear(prid);
                Logs.log("LogicUser.sendUserInfo. User not found: id=" + userId, Logs.LEVEL_WARNING);
            }
        });
    };

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
     * @param toUserId {Number} –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
     * @param ids {Number} –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
     * @param prid
     */
    this.sendUserListInfo = function (ids, toUserId, prid) {
        DataUser.getList(ids, function (list) {
            if (list) {
                list = list.map(prepareUserToClient);
                list = list.map(function (user) {
                    return [
                        user.id,
                        user.nextPointId,
                        user.socNetUserId,
                        user.fullRecoveryTime,
                    ];
                });
                CAPIUser.updateUserListInfo(toUserId, list);
                pFinish(prid);
            } else {
                Logs.log(arguments.callee.name + " Users not found: id=" + ids, Logs.LEVEL_WARNING);
                pFinish(prid);
            }
        });
    };

    let prepareUserToClient = function (user) {
        return {
            id: user.id,
            nextPointId: user.nextPointId,
            socNetUserId: user.socNetUserId,
            fullRecoveryTime: user.fullRecoveryTime,
        };
    };
};

/**
 * –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–π –∫–ª–∞—Å—Å.
 * @type {LogicUser}
 */
LogicUser = new LogicUser();

LogicUser.depends = ['Logs', 'Profiler', 'DB', 'DataUser', 'Statistic', 'SocNet'];